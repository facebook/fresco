/*
 * Copyright (C) 2012 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.facebook.drawee.generic;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.util.TypedValue;

import androidx.annotation.DrawableRes;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

public class ContextCompat {
  private static final Object sLock = new Object();
  private static TypedValue sTempValue;

  /**
   * Returns a drawable object associated with a particular resource ID.
   * <p>
   * Starting in {@link android.os.Build.VERSION_CODES#LOLLIPOP}, the
   * returned drawable will be styled for the specified Context's theme.
   *
   * @param id The desired resource identifier, as generated by the aapt tool.
   *           This integer encodes the package, type, and resource entry.
   *           The value 0 is an invalid identifier.
   * @return Drawable An object that can be used to draw this resource.
   */
  @SuppressWarnings("deprecation")
  @Nullable
  public static Drawable getDrawable(@NonNull Context context, @DrawableRes int id) {
    if (Build.VERSION.SDK_INT >= 21) {
      return context.getDrawable(id);
    } else if (Build.VERSION.SDK_INT >= 16) {
      return context.getResources().getDrawable(id);
    } else {
      // Prior to JELLY_BEAN, Resources.getDrawable() would not correctly
      // retrieve the final configuration density when the resource ID
      // is a reference another Drawable resource. As a workaround, try
      // to resolve the drawable reference manually.
      final int resolvedId;
      synchronized (sLock) {
        if (sTempValue == null) {
          sTempValue = new TypedValue();
        }
        context.getResources().getValue(id, sTempValue, true);
        resolvedId = sTempValue.resourceId;
      }
      return context.getResources().getDrawable(resolvedId);
    }
  }
}
